#!/usr/bin/env python3
import sys
import re


PREFIX = """\
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated by nnapi/codegen.py
"""


NNAPI_FUNCTIONS = [
    ("int", "ANeuralNetworks_getDeviceCount", "uint32_t* numDevices"),
    ("int", "ANeuralNetworks_getDevice", "uint32_t devIndex, ANeuralNetworksDevice** device"),
    ("int", "ANeuralNetworksDevice_getName", "const ANeuralNetworksDevice* device, const char** name"),
    ("int", "ANeuralNetworksDevice_getVersion", "const ANeuralNetworksDevice* device, const char** version"),
    ("int", "ANeuralNetworksDevice_getFeatureLevel", "const ANeuralNetworksDevice* device, int64_t* featureLevel"),
    ("int", "ANeuralNetworksModel_getSupportedOperationsForDevices", " const ANeuralNetworksModel* model, const ANeuralNetworksDevice* const* devices, uint32_t numDevices, bool* supportedOps"),
    ("int", "ANeuralNetworksCompilation_createForDevices", "ANeuralNetworksModel* model, const ANeuralNetworksDevice* const* devices, uint32_t numDevices, ANeuralNetworksCompilation** compilation"),
    ("int", "ANeuralNetworksExecution_compute", "ANeuralNetworksExecution* execution"),
    ("int", "ANeuralNetworksMemory_createFromFd", "size_t size, int protect, int fd, size_t offset, ANeuralNetworksMemory** memory"),
    ("void", "ANeuralNetworksMemory_free", "ANeuralNetworksMemory* memory"),
    ("int", "ANeuralNetworksModel_create", "ANeuralNetworksModel** model"),
    ("void", "ANeuralNetworksModel_free", "ANeuralNetworksModel* model"),
    ("int", "ANeuralNetworksModel_finish", "ANeuralNetworksModel* model"),
    ("int", "ANeuralNetworksModel_addOperand", "ANeuralNetworksModel* model, const ANeuralNetworksOperandType* type"),
    ("int", "ANeuralNetworksModel_setOperandValue", "ANeuralNetworksModel* model, int32_t index, const void* buffer, size_t length"),
    ("int", "ANeuralNetworksModel_setOperandValueFromMemory", "ANeuralNetworksModel* model, int32_t index, const ANeuralNetworksMemory* memory, size_t offset, size_t length"),
    ("int", "ANeuralNetworksModel_addOperation", "ANeuralNetworksModel* model, ANeuralNetworksOperationType type, uint32_t inputCount, const uint32_t* inputs, uint32_t outputCount, const uint32_t* outputs"),
    ("int", "ANeuralNetworksModel_identifyInputsAndOutputs", "ANeuralNetworksModel* model, uint32_t inputCount, const uint32_t* inputs, uint32_t outputCount, const uint32_t* outputs"),
    ("int", "ANeuralNetworksModel_relaxComputationFloat32toFloat16", "ANeuralNetworksModel* model, bool allow"),
    ("int", "ANeuralNetworksCompilation_create", "ANeuralNetworksModel* model, ANeuralNetworksCompilation** compilation"),
    ("void", "ANeuralNetworksCompilation_free", "ANeuralNetworksCompilation* compilation"),
    ("int", "ANeuralNetworksCompilation_setPreference", "ANeuralNetworksCompilation* compilation, int32_t preference"),
    ("int", "ANeuralNetworksCompilation_finish", "ANeuralNetworksCompilation* compilation"),
    ("int", "ANeuralNetworksExecution_create", "ANeuralNetworksCompilation* compilation, ANeuralNetworksExecution** execution"),
    ("void", "ANeuralNetworksExecution_free", "ANeuralNetworksExecution* execution"),
    ("int", "ANeuralNetworksExecution_setInput", "ANeuralNetworksExecution* execution, int32_t index, const ANeuralNetworksOperandType* type, const void* buffer, size_t length"),
    ("int", "ANeuralNetworksExecution_setInputFromMemory", "ANeuralNetworksExecution* execution, int32_t index, const ANeuralNetworksOperandType* type, const ANeuralNetworksMemory* memory, size_t offset, size_t length"),
    ("int", "ANeuralNetworksExecution_setOutput", "ANeuralNetworksExecution* execution, int32_t index, const ANeuralNetworksOperandType* type, void* buffer, size_t length"),
    ("int", "ANeuralNetworksExecution_setOutputFromMemory", "ANeuralNetworksExecution* execution, int32_t index, const ANeuralNetworksOperandType* type, const ANeuralNetworksMemory* memory, size_t offset, size_t length"),
    ("int", "ANeuralNetworksExecution_startCompute", "ANeuralNetworksExecution* execution, ANeuralNetworksEvent** event"),
    ("int", "ANeuralNetworksEvent_wait", "ANeuralNetworksEvent* event"),
    ("void", "ANeuralNetworksEvent_free", "ANeuralNetworksEvent* event"),
    ("int", "ANeuralNetworksExecution_getOutputOperandRank", "ANeuralNetworksExecution* execution, int32_t index, uint32_t* rank"),
    ("int", "ANeuralNetworksExecution_getOutputOperandDimensions", "ANeuralNetworksExecution* execution, int32_t index, uint32_t* dimensions"),
]


def main(argv):
    struct_members = []
    load_functions = []
    define_checks = []

    for ret, name, args in NNAPI_FUNCTIONS:
        short_name = name.replace("ANeuralNetworks", "", 1)

        struct_members.append(f"  {ret}(*{short_name})({args});")

        load_functions.append(f'    *(void**)&nnapi_.{short_name} = dlsym(handle, "{name}");')
        load_functions.append(f'    check_nnapi_.{short_name} = check_{short_name};')

        call_args = "".join(re.findall("\w+(?:,|$)", args))
        if ret == "void":
            define_checks.append(f"""\
{ret} check_{short_name}({args}) {{
  CAFFE_ENFORCE(nnapi_.{short_name});
  nnapi_.{short_name}({call_args});
}}""")
        if ret == "int":
            define_checks.append(f"""\
{ret} check_{short_name}({args}) {{
  CAFFE_ENFORCE(nnapi_.{short_name});
  int ret = nnapi_.{short_name}({call_args});
  // TODO: Maybe add better logging here.
  CAFFE_ENFORCE(ret == ANEURALNETWORKS_NO_ERROR);
  return ret;
}}""")

    if argv[1] == "--header":
        print(PREFIX)
        print("""\
#ifndef DLNNAPI_H_
#define DLNNAPI_H_
#include "NeuralNetworks.h"
struct dlnnapi {
__STRUCT_MEMBERS__
};
#ifdef __cplusplus
void dlnnapi_load(struct dlnnapi** nnapi, struct dlnnapi** check_nnapi);
#endif
#endif
"""
            .replace("__STRUCT_MEMBERS__", "\n".join(struct_members))
            )
        return

    if argv[1] == "--impl":
        print(PREFIX)
        print("""\
#include <dlfcn.h>
#include "dlnnapi.h"
#include "c10/util/Logging.h"
static int loaded = 0;
static struct dlnnapi nnapi_;
static struct dlnnapi check_nnapi_;
__DEFINE_CHECK_FUNCTIONS__
void dlnnapi_load(struct dlnnapi** nnapi, struct dlnnapi** check_nnapi) {
  if (!loaded) {
    // Clear error flag.
    dlerror();
    void* handle = dlopen("libneuralnetworks.so", RTLD_LAZY | RTLD_LOCAL);
    CAFFE_ENFORCE(handle, "Failed to load libneuralnetworks.so ", dlerror());
__LOAD_FUNCTIONS__
    loaded = 1;
  }
  *nnapi = &nnapi_;
  *check_nnapi = &check_nnapi_;
}
"""
            .replace("__DEFINE_CHECK_FUNCTIONS__", "\n".join(define_checks))
            .replace("__LOAD_FUNCTIONS__", "\n".join(load_functions))
            )
        return


if __name__ == "__main__":
    sys.exit(main(sys.argv))
